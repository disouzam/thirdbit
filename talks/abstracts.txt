## What Every Developer Should Know About Education

People in tech spend a lot of time teaching and learning, either on the job or after hours in coding workshops and bootcamps, but most have never been taught how to do either well. This talk introduces a handful of evidence-based concepts and practices that can help. What are the cognitive differences between novices, competent practitioners, and experts? What are the teaching equivalents of unit tests and integration tests? What motivates and demotivates adult learners? What does a repeatable lesson design process look like, and how can we use ideas from cognitive and social psychology to make learning more enjoyable and more effective?

## What Do We Actually Know About Building Software, and Why Do We Think It's True?

Researchers have spent decades studying programs, programmers, and programming, but most people who develop software know little or nothing about what they've discovered. Are some languages easier to learn and use than others? Does test-driven development actually make you more productive? Are some people naturally better programmers than others? And do more eyes reduce the number of bugs in a piece of software or not? This talk will present the best answers we have to these questions and others, explain how we got them, and explore how we could finally make "software engineering" live up to the second half of its name. 
